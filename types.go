// Package shipment contains all events that the Shipment service
// in the ACME Serverless Fitness Shop can send and receive.
package shipment

import (
	"encoding/json"
)

const (
	// Domain is the domain where the services reside.
	Domain = "Shipment"

	// ShipmentRequestedEvent is the event name of ShipmentRequested.
	ShipmentRequestedEvent = "ShipmentRequested"

	// ShipmentSentEvent is the event name of ShipmentSent.
	ShipmentSentEvent = "ShipmentSent"

	// ShipmentDeliveredEvent is the event name of ShipmentDelivered.
	ShipmentDeliveredEvent = "ShipmentDelivered"
)

// ShipmentRequested is the event sent by the Order service when the order
// is finalized and paid and thus ready to be shipped to the customer
type ShipmentRequested struct {
	// Metadata for the event.
	Metadata Metadata `json:"metadata"`

	// Data contains the payload data for the event.
	Data ShipmentRequest `json:"data"`
}

// ShipmentSent is the event sent by the Shipment service when the order
// is shipped to the customer.
type ShipmentSent struct {
	// Metadata for the event.
	Metadata Metadata `json:"metadata"`

	// Data contains the payload data for the event.
	Data ShipmentData `json:"data"`
}

// Metadata is an envelope containing information on the domain, source, type, and status
// of the event.
type Metadata struct {
	// Domain represents the the event came from
	// like Payment or Order.
	Domain string `json:"domain"`

	// Source represents the function the event came from
	// like ValidateCreditCard or SubmitOrder.
	Source string `json:"source"`

	// Type respresents the type of event this is
	// like CreditCardValidated.
	Type string `json:"type"`

	// Status represents the current status of the event
	// like Success or Failure.
	Status string `json:"status"`
}

// ShipmentRequest is the data that the order service emits.
type ShipmentRequest struct {
	// The unique identifier of the order.
	OrderID string `json:"_id"`

	// Delivery is the delivery method that should be used for the shipment.
	Delivery string `json:"delivery"`
}

// ShipmentData is the data the shipment service emits when the shipment is sent.
type ShipmentData struct {
	// The tracking number generated by the shipper.
	TrackingNumber string `json:"trackingNumber"`

	// The unique identifier of the order.
	OrderNumber string `json:"orderNumber"`

	// The current status of the shipment
	Status string `json:"status"`
}

// UnmarshalShipmentRequested parses the JSON-encoded data and stores the result in a
// ShipmentRequestedEvent.
func UnmarshalShipmentRequested(data []byte) (ShipmentRequested, error) {
	var r ShipmentRequested
	err := json.Unmarshal(data, &r)
	return r, err
}

// Marshal returns the JSON encoding of ShipmentRequested.
func (e *ShipmentRequested) Marshal() ([]byte, error) {
	return json.Marshal(e)
}

// UnmarshalShipmentSent parses the JSON-encoded data and stores the result in a
// ShipmentSent.
func UnmarshalShipmentSent(data []byte) (ShipmentSent, error) {
	var r ShipmentSent
	err := json.Unmarshal(data, &r)
	return r, err
}

// Marshal returns the JSON encoding of ShipmentSent.
func (e *ShipmentSent) Marshal() ([]byte, error) {
	return json.Marshal(e)
}

// ToMap returns a map[string]interface of the ShipmentRequest object so it can
// be sent to Sentry. The keys of the map are the same as the JSON element
// names.
func (pd *ShipmentRequest) ToMap() map[string]interface{} {
	m := make(map[string]interface{})

	m["orderID"] = pd.OrderID
	m["delivery"] = pd.Delivery

	return m
}

// ToMap returns a map[string]interface of the ShipmentData object so it can
// be sent to Sentry. The keys of the map are the same as the JSON element
// names.
func (pd *ShipmentData) ToMap() map[string]interface{} {
	m := make(map[string]interface{})

	m["trackingNumber"] = pd.TrackingNumber
	m["orderNumber"] = pd.OrderNumber
	m["status"] = pd.Status

	return m
}
